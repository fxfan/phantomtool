// Generated by CoffeeScript 1.10.0
(function() {
  var DefaultLogger, PhantomTool;

  module.exports.create = function(page) {
    return new PhantomTool(page);
  };

  PhantomTool = function(page) {
    this.page = page;
    this.$ = require('./lib/jquery-1.11.3.min.js');
    this.logger = new DefaultLogger();
  };

  PhantomTool.prototype = {
    begin: function() {
      return this.$.Deferred().resolve().promise();
    },
    visit: function(url) {
      return (function(_this) {
        return function() {
          var dfd;
          dfd = _this.$.Deferred();
          _this.page.open(url, function(status) {
            if (status === 'success') {
              return dfd.resolve();
            } else {
              return dfd.reject("Visiting " + url + " failed with status: " + status);
            }
          });
          return dfd.promise();
        };
      })(this);
    },
    tryVisiting: function(url) {
      return (function(_this) {
        return function() {
          _this.page.open(url, function(status) {});
          return _this.$.Deferred().resolve().promise();
        };
      })(this);
    },
    checkCurrentUrl: function(regex) {
      return (function(_this) {
        return function() {
          var dfd;
          dfd = _this.$.Deferred();
          if (!!_this.page.url.match(regex)) {
            return dfd.resolve();
          } else {
            return dfd.reject("The current URL doesn't match " + regex);
          }
        };
      })(this);
    },
    "eval": function() {
      var args;
      args = Array.prototype.slice.call(arguments);
      return (function(_this) {
        return function() {
          return _this.page.evaluate.apply(_this.page, args);
        };
      })(this);
    },
    sleep: function(ms) {
      return (function(_this) {
        return function() {
          var dfd;
          _this.logger.debug("Wait " + ms + "ms");
          dfd = _this.$.Deferred();
          setTimeout((function() {
            return dfd.resolve();
          }), ms);
          return dfd.promise();
        };
      })(this);
    },
    wait: function(ms) {
      return {
        "for": (function(_this) {
          return function() {
            var args, first;
            args = Array.prototype.slice.call(arguments);
            first = args[0];
            return function() {
              var dfd, evaluate, i, lastUrl, maxTry, test;
              _this.logger.debug("Wait " + ms + "ms for " + first);
              dfd = _this.$.Deferred();
              evaluate = typeof first === 'function' ? function() {
                return _this.page.evaluate.apply(_this.page, args);
              } : function() {
                return _this.page.evaluate(function(selector) {
                  return document.querySelector(selector);
                }, String(first));
              };
              maxTry = Math.floor(ms / 500);
              i = 0;
              lastUrl = null;
              test = function() {
                var t;
                if (i++ >= maxTry) {
                  t = new Date().getTime();
                  _this.page.render("fail_to_wait_" + t + ".jpg", {
                    format: 'jpeg'
                  });
                  dfd.reject("Can't find the element: " + first);
                  return;
                }
                if (lastUrl !== _this.page.url) {
                  _this.logger.debug("  waiting... " + _this.page.url);
                  lastUrl = _this.page.url;
                }
                if (evaluate()) {
                  return dfd.resolve();
                } else {
                  return setTimeout(test, 500);
                }
              };
              test();
              return dfd.promise();
            };
          };
        })(this)
      };
    },
    wait30sec: function() {
      var w;
      w = this.wait(30 * 1000);
      return w["for"].apply(w, arguments);
    },
    injectLibraries: function() {
      return (function(_this) {
        return function() {
          var dfd;
          _this.logger.debug('Inject JS libraries');
          dfd = _this.$.Deferred();
          _this.page.injectJs('lib/jquery-1.11.3.min.js');
          _this.page.injectJs('lib/bililiteRange.min.js');
          _this.page.injectJs('lib/jquery.sendkeys.min.js');
          _this.page.injectJs('lib/tool.js');
          _this.page.evaluate(function() {
            return jQuery.noConflict();
          });
          return dfd.resolve().promise();
        };
      })(this);
    },
    debugTitle: function() {
      return (function(_this) {
        return function() {
          return _this.logger.debug("document.title: " + (_this.page.evaluate(function() {
            return document.title;
          })));
        };
      })(this);
    },
    debugEval: function() {
      var args;
      args = Array.prototype.slice.call(arguments);
      return (function(_this) {
        return function() {
          var v;
          v = _this.page.evaluate.apply(_this.page, args);
          if (v) {
            return _this.logger.debug(v);
          }
        };
      })(this);
    },
    logDebug: function(msg) {
      return (function(_this) {
        return function() {
          return _this.logger.debug(msg);
        };
      })(this);
    },
    logInfo: function(msg) {
      return (function(_this) {
        return function() {
          return _this.logger.info(msg);
        };
      })(this);
    },
    logWarn: function(msg) {
      return (function(_this) {
        return function() {
          return _this.logger.warn(msg);
        };
      })(this);
    },
    logError: function(msg) {
      return (function(_this) {
        return function() {
          return _this.logger.error(msg);
        };
      })(this);
    },
    logFatal: function(msg) {
      return (function(_this) {
        return function() {
          return _this.logger.fatal(msg);
        };
      })(this);
    }
  };

  DefaultLogger = function() {};

  DefaultLogger.prototype = {
    debug: function(msg) {
      return console.log("[DEBUG] " + msg);
    },
    info: function(msg) {
      return console.log("[INFO] " + msg);
    },
    warn: function(msg) {
      return console.log("[WARN] " + msg);
    },
    error: function(msg) {
      return console.log("[ERROR] " + msg);
    },
    fatal: function(msg) {
      return console.log("[FATAL] " + msg);
    }
  };

}).call(this);
